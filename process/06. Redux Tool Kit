1. 설치

    npm i @reduxjs/toolkit react-redux --save

2. store 만들기
    - /redux/store.ts 생성

    import { configureStore } from "@reduxjs/toolkit";

    export const store = configureStore({
    reducer: {},
    });

    export type RootState = ReturnType<typeof store.getState>;
    export type AppDispatch = typeof store.dispatch;


3. GlobalProvider에서 children을 감싸주기

    "use client"; // SessionProvider를 사용하기 위해 추가. 서버 컴포넌트에서는 불가능하므로 client로 변경

    import { SessionProvider } from "next-auth/react";
    import { Toaster } from "react-hot-toast";
    import { Provider } from "react-redux";
    import { store } from "@/redux/store";

    export function GlobalProvider({ children }: { children: React.ReactNode }) {
    return (
        <>
        <Toaster />
        <Provider store={store}>
            <SessionProvider>{children}</SessionProvider>
        </Provider>
        </>
    );
    }

4. /redux/hooks.ts 파일 작성 :
    useSelector와 useDispatch을 기반으로 전역적인 훅을 사용하기 위해 작성.

5. /redux/features/생성하고 슬라이스 생성
    userSlice.ts 작성

    - 초깃값 작성(initialState),
    - 리듀서 함수 작성 (슬라이스 생성 시 슬라이스의 reducers 속성을 정의할 때 그 내부에서 작성해도 됨),
    - 슬라이스 안에 초깃값(initialState), 슬라이스 명(name), 과 리듀서(reducers) 포함시킴
    - export



6. store.ts의 store값을 반환하는 configureStore() 함수의 파라미터로 아규먼트로 들어가는 객체의 reducer 속성에 추가


    reducer: {
        auth: useReducer,   // auth는 임의로 작성
    }



7. components/layout/Header.tsx 에 useAppDispatch, useAppSelector 훅 임포트하여 사용

    이 때 import { setUser, setIsAuthenticated } from "@/redux/features/userSlice";도 가져옴.
    dispatch 함수에 파라미터로 넣어 보내기 위해서임.


    const Header = () => {
    // 액션을 dispatch하기 위해 사용
    const dispatch = useAppDispatch();

    // useSelector를 사용하여 store의 값을 가져온다.
    const { user } = useAppSelector((state) => state.auth);

    그리고 useEffect를 사용하여
    API 통신하여 가져온 data 값을 dispatch()에 넣어서 보냄.

    
    useEffect(() => {
        if (data) {
        dispatch(setUser(data.user));
        dispatch(setIsAuthenticated(true));
        }
    }, [data]);


    그리고 기존에 data.user를 사용하던 곳에서 data를 지우고 user만 남겨둔다. store의 user값을 사용하기 위해서이다.

    
