1. npm i mongoose --save 로 몽구스 설치

2. /backend에 config 폴더 만들고, dbConnect.ts 생성
아래와 같이 내용 작성

imimport mongoose from "mongoose";

const dbConnect = async () => {
  if (mongoose.connection.readyState >= 1) {
    return;
  }

  let DB_URI = "";

  if (process.env.NODE_ENV === "development") {
    DB_URI = process.env.DB_LOCAL_URI!;
    //!은 해당 변수가 null이 아님을 확신할 때 사용. 정확한 명칭은 Non-null assertion operator
  }

  if (process.env.NODE_ENV === "production") {
    DB_URI = process.env.DB_URI!;
  }

  await mongoose.connect(DB_URI).then((con) => {
    // console.log(`MongoDB Connected: ${con.connection.host}`);
    console.log("MongoDB Connected");
  });
};

export default dbConnect;



3. next.config.js 설정
  이 파일은 .env와 같은 역할을 한다. 그러나 Next.js에서는 .env대신
  next.config.js를 사용하기를 권한다.
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

위의 기본설정에서 아래와 같이 변경(DB_URI는 나중에 설정하려고 비워놓음)

/** @type {import('next').NextConfig} */
const nextConfig = {
  env: {
    DB_LOCAL_URI: "mongodb://127.0.0.1:27017/bookit-v2",
    DB_URI: "",
  },
};

export default nextConfig;

4. /app/api/rooms/route.ts에서 연결 테스트

http://localhost:3000/api/rooms로 접근하면

 ✓ Starting...
 ✓ Ready in 1874ms
 ○ Compiling /api/rooms ...
 ✓ Compiled /api/rooms in 1786ms (63 modules)
 GET /api/rooms 200 in 2297ms
MongoDB Connected

위와 같이 "MongoDB Connected" 로그가 출력되는 것을 볼 수 있음

5. 주석처리