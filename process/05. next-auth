1. next-auth: 로그인을 간편하게 만들어주는 라이브러리

2. 설치: npm i next-auth --save

3. next-auth.js.org/providers에서 여러 사이트의 Social 크레덴셜을 사용할 수 있음.
    만약 고유의 크레덴셜을 만들어 사용하려면 Credentials를 선택하여 참고하면 됨.

    /app/api/auth의 경로를 따라야 하므로 해당 디렉토리가 없는 경우 생성해야 함. 
    그리고 그 안에 [...nextauth] 디렉토리를 만들고 route.ts 파일을 생성함.
    이 route.ts 파일에 로직을 작성함.

4. 로그인 컴포넌트에서 signIn 사용

    import { signIn } from "next-auth/react";
    ...
    
    const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setLoading(true);

        // signIn()은 next-auth에서 제공하는 함수로, 로그인을 처리한다. (provider, option)
        const result = await signIn("credentials", {
        redirect: false,
        email,
        password,
        });

        setLoading(false);

        if (result?.error) {
        toast.error(result.error);
        } else {
        router.replace("/");
        }
    };


5. GlobalProvider.tsx에서 SessionProvider 적용

    "use client"; // SessionProvider를 사용하기 위해 추가. 서버 컴포넌트에서는 불가능하므로 client로 변경

    import { SessionProvider } from "next-auth/react";
    import { Toaster } from "react-hot-toast";

    export function GlobalProvider({ children }: { children: React.ReactNode }) {
    return (
        <>
        <Toaster />
        <SessionProvider>{children}</SessionProvider>
        </>
    );
    }




6. 하위 컴포넌트에서 세션 사용(헤더에서 useSession 사용)
    import { useSession } from "next-auth/react";
    ...
      const { data } = useSession();




7. 로그아웃 기능 추가하기( 마찬가지로 헤더에 추가)

    "use client";

    import { useSession, signOut } from "next-auth/react";
    import Link from "next/link";
    import React from "react";

    const Header = () => {
    const { data } = useSession();
    // console.log(data);

    const logoutHandler = () => {
        signOut();
    };
